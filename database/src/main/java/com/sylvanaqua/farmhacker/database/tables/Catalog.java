/*
 * This file is generated by jOOQ.
*/
package com.sylvanaqua.farmhacker.database.tables;


import com.sylvanaqua.farmhacker.database.Farmhacker;
import com.sylvanaqua.farmhacker.database.Keys;
import com.sylvanaqua.farmhacker.database.tables.records.CatalogRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Catalog extends TableImpl<CatalogRecord> {

    private static final long serialVersionUID = 1550721377;

    /**
     * The reference instance of <code>farmhacker.catalog</code>
     */
    public static final Catalog CATALOG = new Catalog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CatalogRecord> getRecordType() {
        return CatalogRecord.class;
    }

    /**
     * The column <code>farmhacker.catalog.id</code>.
     */
    public final TableField<CatalogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>farmhacker.catalog.category</code>.
     */
    public final TableField<CatalogRecord, String> CATEGORY = createField("category", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>farmhacker.catalog.name</code>.
     */
    public final TableField<CatalogRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * Create a <code>farmhacker.catalog</code> table reference
     */
    public Catalog() {
        this("catalog", null);
    }

    /**
     * Create an aliased <code>farmhacker.catalog</code> table reference
     */
    public Catalog(String alias) {
        this(alias, CATALOG);
    }

    private Catalog(String alias, Table<CatalogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Catalog(String alias, Table<CatalogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Farmhacker.FARMHACKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CatalogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CatalogRecord> getPrimaryKey() {
        return Keys.KEY_CATALOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CatalogRecord>> getKeys() {
        return Arrays.<UniqueKey<CatalogRecord>>asList(Keys.KEY_CATALOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog as(String alias) {
        return new Catalog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Catalog rename(String name) {
        return new Catalog(name, null);
    }
}
