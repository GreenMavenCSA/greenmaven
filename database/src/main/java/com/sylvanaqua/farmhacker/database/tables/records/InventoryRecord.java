/*
 * This file is generated by jOOQ.
*/
package com.sylvanaqua.farmhacker.database.tables.records;


import com.sylvanaqua.farmhacker.database.tables.Inventory;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InventoryRecord extends UpdatableRecordImpl<InventoryRecord> implements Record6<Integer, Integer, Short, Double, Double, Timestamp> {

    private static final long serialVersionUID = -1692556636;

    /**
     * Setter for <code>farmhacker.inventory.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>farmhacker.inventory.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>farmhacker.inventory.catalog_id</code>.
     */
    public void setCatalogId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>farmhacker.inventory.catalog_id</code>.
     */
    public Integer getCatalogId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>farmhacker.inventory.measure</code>.
     */
    public void setMeasure(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>farmhacker.inventory.measure</code>.
     */
    public Short getMeasure() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>farmhacker.inventory.retail_price</code>.
     */
    public void setRetailPrice(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>farmhacker.inventory.retail_price</code>.
     */
    public Double getRetailPrice() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>farmhacker.inventory.wholesale_price</code>.
     */
    public void setWholesalePrice(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>farmhacker.inventory.wholesale_price</code>.
     */
    public Double getWholesalePrice() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>farmhacker.inventory.time_entered</code>.
     */
    public void setTimeEntered(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>farmhacker.inventory.time_entered</code>.
     */
    public Timestamp getTimeEntered() {
        return (Timestamp) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, Integer, Short, Double, Double, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, Integer, Short, Double, Double, Timestamp> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Inventory.INVENTORY.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Inventory.INVENTORY.CATALOG_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field3() {
        return Inventory.INVENTORY.MEASURE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return Inventory.INVENTORY.RETAIL_PRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return Inventory.INVENTORY.WHOLESALE_PRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field6() {
        return Inventory.INVENTORY.TIME_ENTERED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getCatalogId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value3() {
        return getMeasure();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getRetailPrice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getWholesalePrice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value6() {
        return getTimeEntered();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryRecord value2(Integer value) {
        setCatalogId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryRecord value3(Short value) {
        setMeasure(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryRecord value4(Double value) {
        setRetailPrice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryRecord value5(Double value) {
        setWholesalePrice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryRecord value6(Timestamp value) {
        setTimeEntered(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryRecord values(Integer value1, Integer value2, Short value3, Double value4, Double value5, Timestamp value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InventoryRecord
     */
    public InventoryRecord() {
        super(Inventory.INVENTORY);
    }

    /**
     * Create a detached, initialised InventoryRecord
     */
    public InventoryRecord(Integer id, Integer catalogId, Short measure, Double retailPrice, Double wholesalePrice, Timestamp timeEntered) {
        super(Inventory.INVENTORY);

        set(0, id);
        set(1, catalogId);
        set(2, measure);
        set(3, retailPrice);
        set(4, wholesalePrice);
        set(5, timeEntered);
    }
}
