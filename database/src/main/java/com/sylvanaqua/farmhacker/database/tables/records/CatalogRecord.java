/*
 * This file is generated by jOOQ.
*/
package com.sylvanaqua.farmhacker.database.tables.records;


import com.sylvanaqua.farmhacker.database.tables.Catalog;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CatalogRecord extends UpdatableRecordImpl<CatalogRecord> implements Record6<Integer, String, String, Double, Double, Integer> {

    private static final long serialVersionUID = -532613552;

    /**
     * Setter for <code>farmhacker.catalog.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>farmhacker.catalog.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>farmhacker.catalog.category</code>.
     */
    public void setCategory(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>farmhacker.catalog.category</code>.
     */
    public String getCategory() {
        return (String) get(1);
    }

    /**
     * Setter for <code>farmhacker.catalog.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>farmhacker.catalog.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>farmhacker.catalog.retail_price</code>.
     */
    public void setRetailPrice(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>farmhacker.catalog.retail_price</code>.
     */
    public Double getRetailPrice() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>farmhacker.catalog.wholesale_price</code>.
     */
    public void setWholesalePrice(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>farmhacker.catalog.wholesale_price</code>.
     */
    public Double getWholesalePrice() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>farmhacker.catalog.units_available</code>.
     */
    public void setUnitsAvailable(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>farmhacker.catalog.units_available</code>.
     */
    public Integer getUnitsAvailable() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, String, String, Double, Double, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, String, String, Double, Double, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Catalog.CATALOG.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Catalog.CATALOG.CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Catalog.CATALOG.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return Catalog.CATALOG.RETAIL_PRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return Catalog.CATALOG.WHOLESALE_PRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Catalog.CATALOG.UNITS_AVAILABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCategory();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getRetailPrice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getWholesalePrice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getUnitsAvailable();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatalogRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatalogRecord value2(String value) {
        setCategory(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatalogRecord value3(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatalogRecord value4(Double value) {
        setRetailPrice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatalogRecord value5(Double value) {
        setWholesalePrice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatalogRecord value6(Integer value) {
        setUnitsAvailable(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatalogRecord values(Integer value1, String value2, String value3, Double value4, Double value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CatalogRecord
     */
    public CatalogRecord() {
        super(Catalog.CATALOG);
    }

    /**
     * Create a detached, initialised CatalogRecord
     */
    public CatalogRecord(Integer id, String category, String name, Double retailPrice, Double wholesalePrice, Integer unitsAvailable) {
        super(Catalog.CATALOG);

        set(0, id);
        set(1, category);
        set(2, name);
        set(3, retailPrice);
        set(4, wholesalePrice);
        set(5, unitsAvailable);
    }
}
